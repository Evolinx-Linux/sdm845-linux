name: BUILD - SDM845 Kernel

on:
    workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - name: Install required packages
      run: |
        sudo apt update
        sudo apt install -y build-essential libgmp-dev libmpfr-dev libmpc-dev libisl-dev libncurses5-dev bc git bison flex zstd
        sudo apt install -y clang gcc make gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi
        sudo apt install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
    - name: Build Image and modules headers
      run: |
        git clone https://github.com/Evolinx-Linux/sdm845-linux.git -b evolinx-6.7.8 src --depth=1
        mkdir -p out artifacts/{modules,headers,kernel,dtb}

        cd src

        make O=../out CC=clang ARCH=arm64 SUBARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- -j"$(nproc --all)" evolinx_defconfig
        make O=../out CC=clang ARCH=arm64 SUBARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- -j"$(nproc --all)"
        make O=../out CC=clang ARCH=arm64 SUBARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- -j"$(nproc --all)" modules_prepare
        make O=../out CC=clang ARCH=arm64 SUBARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- -j"$(nproc --all)" modules_install INSTALL_MOD_PATH=../artifacts/modules
        make O=../out CC=clang ARCH=arm64 SUBARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- -j"$(nproc --all)" headers_install INSTALL_HDR_PATH=../artifacts/headers

        echo "[ BUILD ]: Kernel compile done"

        cd ../artifacts
        cp -rf ../out/arch/arm64/boot/Image* kernel/
        cp -rf ../out/arch/arm64/boot/dts/* dtb/

        echo "[ BUILD ]: compressing modules"
        tar -cJf ../modules.tar.xz modules
        echo "[ BUILD ]: compressing headers"
        tar -cJf ../headers.tar.xz headers
        echo "[ BUILD ]: compressing kernel image"
        tar -cJf ../kernel.tar.xz kernel
        echo "[ BUILD ]: compressing dtb"
        tar -cJf ../dtb.tar.xz dtb

        echo "[ BUILD ]: compressing modules, headers, kernel, dtb for artifacts"

        tar -cJf ../artifacts.tar.xz .

        echo "[ BUILD ]: Done"
        cd ..
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        path: artifacts.tar.xz
    - name: Upload release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          modules.tar.xz
          headers.tar.xz
          kernel.tar.xz
          dtb.tar.xz
